$master_script = <<SCRIPT
#!/bin/bash

# for root -> wget http://archive.cloudera.com/cm5/installer/5.15.0/cloudera-manager-installer.bin
# wget https://archive.cloudera.com/cm6/6.1.0/cloudera-manager-installer.bin
# for root -> chmod u+x cloudera-manager-installer.bin
# restart

# sudo service cloudera-scm-server start
# sudo service cloudera-scm-server stop
# sudo service cloudera-scm-server restart

# ssh-keygen -t rsa
# ssh-copy-id root@sandbox-cloudera-cluster-node2

# cd ~
# wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "https://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.rpm"
# sudo yum localinstall jdk-8u161-linux-x64.rpm


SCRIPT

$hosts_script = <<SCRIPT

echo "****************************"
echo "Starting Prepare Host"
echo "****************************"

useradd  -mG wheel hadoop
echo 123 | passwd hadoop --stdin
sed -i "s/PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config

sed -i "s/%wheel\tALL=(ALL)\tALL/# %wheel\tALL=(ALL)\tALL/g" /etc/sudoers
sed -i "s/# %wheel\tALL=(ALL)\tNOPASSWD: ALL/%wheel\tALL=(ALL)\tNOPASSWD: ALL/g" /etc/sudoers

service sshd restart

# sudo apt-get update -y && apt-get upgrade -y
# sudo apt install ssh rsync -y

# set umask
echo -e "\nSetting Umask to 022 in .bashrc"
umask 022
echo "umask 022" >> ~/.bashrc

# disable SELinux
echo -e "\nDisabling SELinux"
sed -i "s/SELINUX=permissive/SELINUX=disabled/g" /etc/selinux/config

echo -e "\n****************************"
echo "Prepare Nodes COMPLETE!"
echo "****************************"

SCRIPT

Vagrant.configure("2") do |config|
    # config.ssh.insert_key = false

    # Define base image
    config.vm.box = "geerlingguy/centos7"

    # Manage /etc/hosts on host and VMs
    config.hostmanager.enabled = false
    config.hostmanager.manage_host = true
    config.hostmanager.include_offline = true
    config.hostmanager.ignore_private_ip = false

    config.vm.define :clouderaClusterNode1 do |node|
      node.vm.provider :virtualbox do |v|
        v.name = "sandbox-cloudera-cluster-node1"
        v.customize ["modifyvm", :id, "--memory", "5096"]
      end
      node.vm.network :private_network, ip: "10.211.55.100"
      node.vm.hostname = "sandbox-cloudera-cluster-node1"
      node.vm.provision :shell, :inline => $hosts_script
      node.vm.provision :hostmanager
      node.vm.provision :shell, :inline => $master_script
    end

    config.vm.define :clouderaClusterNode2 do |node|
      node.vm.provider :virtualbox do |v|
        v.name = "sandbox-cloudera-cluster-node2"
        v.customize ["modifyvm", :id, "--memory", "1024"]
      end
      node.vm.network :private_network, ip: "10.211.55.101"
      node.vm.hostname = "sandbox-cloudera-cluster-node2"
      node.vm.provision :shell, :inline => $hosts_script
      node.vm.provision :hostmanager
    end

    config.vm.define :clouderaClusterNode3 do |node|
      node.vm.provider :virtualbox do |v|
        v.name = "sandbox-cloudera-cluster-node3"
        v.customize ["modifyvm", :id, "--memory", "1024"]
      end
      node.vm.network :private_network, ip: "10.211.55.102"
      node.vm.hostname = "sandbox-cloudera-cluster-node3"
      node.vm.provision :shell, :inline => $hosts_script
      node.vm.provision :hostmanager
    end

    config.vm.define :clouderaClusterNode4 do |node|
      node.vm.provider :virtualbox do |v|
        v.name = "sandbox-cloudera-cluster-node4"
        v.customize ["modifyvm", :id, "--memory", "1024"]
      end
      node.vm.network :private_network, ip: "10.211.55.103"
      node.vm.hostname = "sandbox-cloudera-cluster-node4"
      node.vm.provision :shell, :inline => $hosts_script
      node.vm.provision :hostmanager
    end

    # Kafka producer.
    config.vm.define "kafkaProducer" do |app|
        app.vm.hostname = "sandbox-kafka-producer.dev"
        app.vm.network :private_network, ip: "192.168.60.4"
        config.vm.synced_folder "/home/sergii/Vagrant_data/Shared", "/vagrant_data"
    end


    # Kafka server.
    # config.vm.define "kafkaServer" do |app|
    #    app.vm.hostname = "sandbox-kafka-server.dev"
    #    app.vm.box = "geerlingguy/centos7"
    #    app.vm.network :private_network, ip: "192.168.60.5"
    # end

    # config.vm.provision "ansible" do |ansible|
    #    ansible.playbook = "../Ansible/playbook.yml"
    #    # Run commands as root.
    #    ansible.sudo = true
    # end
end
